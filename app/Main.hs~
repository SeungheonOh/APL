module Main where

import qualified MyLib (someFunc)
import qualified Data.Vector as V
import Control.Exception (Exception, throwIO)
import GHC.Exception (throw)


data APLException = RankError
                  | IndexError
                  | LengthError
                  deriving (Show)

instance Exception APLException

data Array a = Array
  { value :: V.Vector a
  , shape :: [Int]
  } deriving (Eq, Show)

empty :: Array a
empty = Array V.empty []

fill :: Array a -> Array a
fill (Array vec ns)
  | length vec == targ = Array vec ns
  | otherwise = Array (V.take targ $ V.fromList [1..targ] >> vec) ns -- Yes this is terrible
  where
    targ = product ns

rho :: [a] -> [Int] -> Array a
rho d a = fill $ Array (V.fromList d) a

at :: Array a -> Int -> a
at (Array vec ns) n
  | n <= 0 = throw IndexError
  | otherwise = undefined
  where
    mult = [1..length ns]

main :: IO ()
main = do
  print $ fill $ rho [1..3] [3, 3]
